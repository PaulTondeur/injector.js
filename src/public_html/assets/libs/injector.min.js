var injector={};define("namespaces",function(){}),injector.Injector=function(){this._mappings={},this._createMapping=function(e,t,n){if(this.hasMapping(e,t))throw new Error("Already has mapping for "+e);var r=new injector.InjectionMapping(e,t,n);return this._mappings[n]=r,r},this._getMappingID=function(e,t){return t=t==undefined?"":t,e+"|"+t},this._postConstruct=function(e){var t=e.postConstructs!==undefined?e.postConstructs instanceof Array?e.postConstructs:[]:[],n,r,i;for(n in t)r=t[n],i=e[r]===undefined?null:e[r],typeof i=="function"&&i.apply(e)}},injector.Injector.prototype={map:function(e,t){var n=this._getMappingID(e,t);return this._mappings[n]||this._createMapping(e,t,n)},unmap:function(e,t){if(!this.hasMapping(e,t)){var r=t==undefined?"":" by name "+t;throw new Error('Cannot unmap "'+e+r+'" because no mapping has been found')}var n=this._getMappingID(e,t);delete this._mappings[n]},hasMapping:function(e,t){var n=this._getMappingID(e,t);return this._mappings[n]!==undefined},getInstance:function(e,t){if(this.hasMapping(e,t))return this.getMapping(e,t).getValue();var n=t==undefined?"":" by name "+t;throw new Error('Cannot return instance "'+e+n+'" because no mapping has been found')},getMapping:function(e,t){if(this.hasMapping(e,t)){var n=this._getMappingID(e,t);return this._mappings[n]}var r=t==undefined?"":" by name "+t;throw new Error('Mapping "'+e+r+'" was not found')},injectInto:function(e){var t,n;for(t in e){n=injector.utils.stringToObject(t,e[t]);if(n!=null){if(!this.hasMapping(n.type,n.name))throw new Error("Cannot inject "+n.type+" into "+e+" due to a missing rule");e[t]=this.getInstance(n.type,n.name)}}this._postConstruct(e)}},define("Injector",function(){}),injector.utils={},injector.utils.stringToObject=function(e,t){if(typeof t!="string")return null;var n={name:"",type:e},r=new RegExp("^inject"),i=new RegExp(/[\w:\-]?name[\s]*?=[\s]*?("[^"]+"|'[^']+'|\w+)/),s=new RegExp("[^:]+$"),o,u;return t=="inject"?n:t.match(r)?(o=i.exec(t),u=s.exec(t),n.name=o!=null&&o.length==2?o[1].replace(/"/gm,""):"",n.type=u!=null&&u.length==1?u[0]:e,n):null},define("InjectorUtils",function(){}),injector.InjectionMapping=function(e,t,n){this._type=e,this._name=t,this._id=n,this._value=null,this._toType=null,this._isValid=function(){return this._value!=null||this._toType!=null},this._validateBeforeCreation=function(){if(this._isValid())throw new Error("Could not create mapping for "+this._id+" because it already has been defined");return!0}},injector.InjectionMapping.prototype={toValue:function(e){if(!this._validateBeforeCreation())return;this._value=e},toType:function(e){if(!this._validateBeforeCreation())return;this._toType=e},toSingleton:function(e){this.toValue(new e)},getValue:function(){if(!this._isValid())throw new Error("Could not get value for "+this._id+" because the mapping is invalid");if(this._value!=null)return this._value;if(this._toType!=null)return new this._toType}},define("InjectionMapping",function(){}),require(["namespaces","Injector","InjectorUtils","InjectionMapping"],function(){}),define("main",function(){})